{"version":3,"file":"component---src-pages-mdx-frontmatter-slug-tsx-content-file-path-blogs-testfile-mdx-1b2f1962e243cd3efecd.js","mappings":"kMAiCO,MAAMA,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,CC3EA,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,OAAQ,UACPC,IAAsBP,EAAMH,YAC/B,OAAOW,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6EAA8EI,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,QAAS,wDAAyD,KAAMG,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,kCAAmCI,EAAAA,cAAoBP,EAAYK,OAAQ,KAAM,QAAS,gBAC/Z,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,EAAGI,IAAsBP,EAAMH,YAC3E,OAAOa,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCVA,MAAMW,EAAWC,IACf,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOJ,EAAAA,cAAoBO,EAAAA,EAAQ,CACjCC,UAAWH,EAAKI,IAAIC,YAAYC,OAC/BX,EAAAA,cAAoB,KAAM,CAC3BY,UAAWC,EAAAA,IACV,WAAYR,EAAKI,IAAIC,YAAYG,MAAOP,EAAS,EAGzCQ,EAAO,IAAMd,EAAAA,cAAoB,QAAS,KAAM,iBAE9C,SAASe,EAAiBvB,GACvC,OAAOQ,EAAAA,cAAoBG,EAAUX,EAAOQ,EAAAA,cAAoBgB,EAAqBxB,GACvF,C,+CC2BA,IAnCgBA,GAeZQ,EAAAA,cAAAA,MAAAA,CAAKY,UAAWK,EAAAA,IAYdjB,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIY,UAAaM,EAAAA,IAAU1B,EAAMgB,WAChChB,EAAMc,U,wGCrCR,IAAIW,EAAY,kCACZJ,EAAO,6BACPK,EAAU,+B","sources":["webpack://jay-s-blog/./node_modules/@mdx-js/react/lib/index.js","webpack://jay-s-blog/./blogs/testfile.mdx","webpack://jay-s-blog/./src/pages/{mdx.frontmatter__slug}.tsx","webpack://jay-s-blog/./src/components/layout.tsx","webpack://jay-s-blog/./src/components/layout.module.css"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"hi. this is a test blog that i'm writing. avoiding captilization has a\\r\\n\", React.createElement(_components.em, null, \"nice\"), \" aesthetic to it. i wonder if there is a name to it.\"), \"\\n\", React.createElement(_components.p, null, \"i'll probably use this page to \", React.createElement(_components.strong, null, \"TEST\"), \" mdx syntax.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/agtpm/Desktop/Development/gatsby/gatsbytut/blogs/testfile.mdx\";\nimport * as React from 'react';\nimport Layout from '../components/layout';\nimport {date} from '../components/layout.module.css';\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"h4\", {\n    className: date\n  }, \"Posted: \", data.mdx.frontmatter.date), children);\n};\nconst query = \"1083539204\";\nexport const Head = () => React.createElement(\"title\", null, \"My Blog Posts\");\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\r\nimport './layout.css'\r\nimport {\r\n  container,\r\n  heading,\r\n} from './layout.module.css'\r\n\r\n\r\n//when is it a good idea to create a function component Prop?\r\nconst Layout = (props: any) => {\r\n  /*\r\n  const data = useStaticQuery(graphql`\r\n    query{\r\n      allFile {\r\n        nodes {\r\n          extension\r\n          dir\r\n          modifiedTime\r\n        }\r\n      }\r\n    }`\r\n  );\r\n  */\r\n  return (\r\n    <div className={container}>\r\n      {/*\r\n      <nav>\r\n        <ul className={navLinks}>\r\n          <li className={navLinkItem}>\r\n            <Link to=\"/blog\" className={navLinkText}>\r\n              Blog\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n  */}\r\n      <main>\r\n        <h1 className = {heading}>{props.pageTitle}</h1>\r\n        {props.children}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var date = \"layout-module--date--e6e02\";\nexport var heading = \"layout-module--heading--f158c\";"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","p","em","strong","_provideComponents","React","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","className","date","Head","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","container","heading"],"sourceRoot":""}